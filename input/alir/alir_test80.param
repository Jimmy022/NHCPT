#------Experiments to test (separated with commas)-----

data.experiments=['AliCPT_r_test80']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

data.parameters['omega_b']    = [2.249,  1.8, 3, 0.016, 0.01,'cosmo']
data.parameters['omega_cdm']  = [0.1120, 0.1,   0.2, 0.0016,1,   'cosmo']
data.parameters['100*theta_s']  = [ 1.04110,   1.02, 1.06,    0.00030,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0447,   2.7, 3.5,      0.015,    1, 'cosmo']
data.parameters['n_s']      = [0.963,  0.9,1.1, 0.004, 1,   'cosmo']
data.parameters['tau_reio']   = [0.085,  0.004,0.12, 0.0044,1,   'cosmo']
data.parameters['r']          = [0.014, 0.0, 0.1,   0.04,    1, 'cosmo']

# Derived parameters
data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
#data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Derived parameters# Cosmological parameters list
# Other cosmo parameters (fixed parameters, precision parameters, etc.)
data.cosmo_arguments['T_cmb'] = 2.7255
data.cosmo_arguments['N_ur'] = 0.00641
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.02
data.cosmo_arguments['T_ncdm'] = 0.71611
data.cosmo_arguments['deg_ncdm'] = 3
data.cosmo_arguments['modes'] = 's,t'
data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/external/bbn/sBBN.dat'


#------ Mcmc parameters ----

data.N=10
data.write_step=5