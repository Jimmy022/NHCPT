data.experiments=['AliCPT_nu_tau']
s
#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

data.parameters['omega_b']      = [  2.212,   None, None,      0.015, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [ 0.11933,   None, None,     0.0013,    1, 'cosmo']
data.parameters['100*theta_s']  = [ 1.04101,   None, None,    0.00030,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.047,   None, None,      0.015,    1, 'cosmo']
data.parameters['n_s']          = [  0.9665,   None, None,     0.0042,    1, 'cosmo']
data.parameters['tau_reio']   = [0.0561,  0.049,0.0632, 0.0044,1,   'cosmo']
data.parameters['N_ur']    = [ 0.00641,   0, 1,     0.0013,    1, 'cosmo']
data.parameters['N_ncdm']    = [ 1,   0, None,     0.0013,    1, 'cosmo']


# Derived parameters# Cosmological parameters list

data.parameters['m_ncdm'] = [0.02, 0.001,1, 0.4,1, 'cosmo']
data.parameters['deg_ncdm']    = [ 3,   0, None,     0.0013,    1, 'cosmo']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)
#data.cosmo_arguments['h'] = 0.6794
#data.cosmo_arguments['T_cmb'] = 2.7255
#data.cosmo_arguments['omega_b'] = 0.022199
#data.cosmo_arguments['N_ur'] = 0.00641
#data.cosmo_arguments['N_ncdm'] = 1
#data.cosmo_arguments['m_ncdm'] = 0.02
#data.cosmo_arguments['T_ncdm'] = 0.71611
#data.cosmo_arguments['deg_ncdm'] = 3
#data.cosmo_arguments['YHe'] = 0.24725


#------ Mcmc parameters ----

data.N=10
data.write_step=5